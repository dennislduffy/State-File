rm(list = ls())

setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/New State Growth Tables/2015 Growth Tables")

x = c("dplyr", "tidyr")

lapply(x, library, character.only = T)

#set working directory
setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/Data Files")

#define trim functions
# returns string w/o leading whitespace
trim.leading <- function (x)  sub("^\\s+", "", x)

# returns string w/o trailing whitespace
trim.trailing <- function (x) sub("\\s+$", "", x)

# returns string w/o leading or trailing whitespace
trim <- function (x) gsub("^\\s+|\\s+$", "", x)

#create translation table for domains
domain.codes <- data.frame(subject = c("C", "A", "W", "O", "R"),
                           DOMAIN = c("COMPOSITE", "LISTENING", "WRITING", "SPEAKING", "READING"))


#create translation table for proficiency levels 
proficiency.key <- data.frame(Proficiency.Key = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K"), 
                              Proficiency = c(1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6))


#Make a grade key. Note: Grades 9-12 are classified as HS because WIDA lumps those grades together for the growth
#tables. 
LYGradeKey <- data.frame(LYGradeKey = c("KG", "FIRST", "SECOND", "THIRD", "FOURTH", "FIFTH", "SIXTH", "SEVENTH", "EIGHTH", 
                                        rep("HS",4)), 
                         grade.level = c("KG", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"))

#create a list of all files in the working directory
file.list = as.list(list.files(pattern="*.txt"))

#open and clean all files
for(file in file.list){
  pos <- match(file, file.list)
  tempfile.name <- as.character(file.list[pos])
  
  #load 2014 composite file 
  tempfile.raw <- read.table(file = tempfile.name, sep = "\t", quote = "\"", header = T
                             , colClasses = c("marssNumber" = "character"
                                              , "marssLocalUseData" = "character" 
                                              ,"testDate" = "character"
                                              , "districtNumber" = "character"
                                              , "districtType" = "character"
                                              , "schoolNumber" = "character"))
  
  
  tempfile.raw$districtNumber<- trim(tempfile.raw$districtNumber)
  tempfile.raw$districtType <- trim(tempfile.raw$districtType)
  tempfile.raw$schoolNumber <- trim(tempfile.raw$schoolNumber)
  
  
  tempfile <- tempfile.raw %>%
    select(marssNumber, marssLocalUseData, testDate, districtNumber, districtType, schoolNumber, scoreCode, grade, 
           lepFlag, score1, score2, subject, admSince97) %>%
    filter(scoreCode == "VS") %>%
    mutate(score1 = score1/100, 
           score2 = score2/100, 
           SCHOOLID = paste(districtNumber, districtType, schoolNumber, sep = "")) %>%
    mutate(YEAR = substr(testDate, 1, 4)) %>% 
    rename(MARSSID = marssNumber, 
           LOCALSTUDENTID = marssLocalUseData, 
           GRADE = grade, 
           SCORE1 = score1, 
           SCORE2 = score2, 
           ADM = admSince97) %>%
    left_join(domain.codes, by = "subject") %>%
    select(-c(subject, testDate, districtNumber, districtType, schoolNumber, scoreCode, lepFlag))
  
  #create file name
  file.name <- paste(paste(unique(tempfile$DOMAIN), unique(tempfile$YEAR), sep = "_"), ".rds", sep = "")
  
  #set working directory for file 
  sub.file <- paste(unique(tempfile$YEAR), "Files", sep = " ")
  directory.name <- paste("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/", sub.file, sep = "")
  
  setwd(directory.name)
  
  saveRDS(tempfile, file.name)
  
  #reset working directory 
  setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/Data Files")
}

#combine 2014 files 
setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/2014 Files")
files.2014 <- as.list(list.files())

DSR.14 <- data.frame(data.table::rbindlist(lapply(files.2014, readRDS)))


DSR.14 <- DSR.14 %>%
  filter(SCORE2 > 0)

DSR.14$AnalysisID <- ifelse(DSR.14$MARSSID == "" & DSR.14$LOCALSTUDENTID != "", DSR.14$LOCALSTUDENTID, DSR.14$MARSSID)

DSR.14 <- filter(DSR.14, AnalysisID != "")

#Remove duplicates
DSR.14 <- DSR.14 %>%
  arrange(AnalysisID, DOMAIN) 

ID.Remove <- DSR.14 %>%
  group_by(AnalysisID) %>%
  filter(n() > 5) %>%
  select(AnalysisID)

DSR.14 <- DSR.14[!(DSR.14$AnalysisID %in% ID.Remove$AnalysisID), ]

#Remove students with fewer than 5 scores
DSR.14 <- DSR.14 %>%
  arrange(MARSSID, DOMAIN) 

ID.Remove <- DSR.14 %>%
  group_by(MARSSID) %>%
  filter(n() < 5) %>%
  select(MARSSID)

DSR.14 <- DSR.14[!(DSR.14$MARSSID %in% ID.Remove$MARSSID), ]

DSR.14 <- DSR.14 %>%
  select(MARSSID, GRADE, SCORE1, SCORE2, DOMAIN) %>%
  rename(LYGRADE = GRADE, 
         LYScaleScore = SCORE1, 
         LYProficiencyScore = SCORE2) %>%
  mutate(LYProficiencyLevel = plyr::round_any(LYProficiencyScore, .5, floor))


setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/State DSR")
saveRDS(DSR.14, "2014 DSR.rds")


#combine 2015 files 
setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/2015 Files")
files.2015 <- as.list(list.files())

DSR.15 <- data.frame(data.table::rbindlist(lapply(files.2015, readRDS)))

DSR.15 <- DSR.15 %>%
  filter(SCORE2 > 0)

DSR.15$AnalysisID <- ifelse(DSR.15$MARSSID == "" & DSR.15$LOCALSTUDENTID != "", DSR.15$LOCALSTUDENTID, DSR.15$MARSSID)

DSR.15 <- filter(DSR.15, AnalysisID != "")


#Remove duplicates
DSR.15 <- DSR.15 %>%
  arrange(AnalysisID, DOMAIN) 

ID.Remove <- DSR.15 %>%
  group_by(AnalysisID) %>%
  filter(n() > 5) %>%
  select(AnalysisID)

DSR.15 <- DSR.15[!(DSR.15$AnalysisID %in% ID.Remove$AnalysisID), ]


#Remove students with fewer than 5 scores
DSR.15 <- DSR.15 %>%
  arrange(MARSSID, DOMAIN) 

ID.Remove <- DSR.15 %>%
  group_by(MARSSID) %>%
  filter(n() < 5) %>%
  select(MARSSID)

DSR.15 <- DSR.15[!(DSR.15$MARSSID %in% ID.Remove$MARSSID), ]

DSR.15 <- DSR.15 %>%
  rename(CYGRADE = GRADE, 
         CYScaleScore = SCORE1, 
         CYProficiencyScore = SCORE2) %>%
  mutate(CYProficiencyLevel = plyr::round_any(CYProficiencyScore, .5, floor))  #%>%
#select(-c(MARSSID, LOCALSTUDENTID))


setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/State DSR")
saveRDS(DSR.15, "2015 DSR.rds")

#Read in .rds from director
DSR.15 <- readRDS(file = "2015 DSR.rds")
DSR.14 <- readRDS(file = "2014 DSR.rds")


#join 2 years of DSR data
student.data <- DSR.15 %>%
  inner_join(DSR.14, by = c("MARSSID", "DOMAIN")) %>%
  mutate(scorediff = CYScaleScore - LYScaleScore)



#subset student to only include columns needed for growth table calculations
student.data <- student.data %>%
  select(LYGRADE, scorediff, LYProficiencyLevel, scorediff, YEAR, DOMAIN) %>%
  left_join(proficiency.key, by = c("LYProficiencyLevel" = "Proficiency")) %>%
  left_join(LYGradeKey, by = c("LYGRADE" = "grade.level")) %>%
  mutate(LYGradeKey = as.character(LYGradeKey), 
         DOMAIN = as.character(DOMAIN)) %>%
  select(-c(LYGRADE))

#Make list of CYGRADE
GRADES <- as.character(unique(student.data$LYGradeKey))
DOMAINS <- as.character(unique(student.data$DOMAIN))
YEAR <- unique(student.data$YEAR)
proficiency.cuts <- unique(student.data$LYProficiencyLevel)

quantile.labels <- c("<20%", ">20% & <40%", ">40% & <60%", ">60% & <80%", ">80%")
quantile.names <- c(0, 20, 40, 60, 80)
quantile.table <- data.frame(quantile.labels, quantile.names)

#set new working directory for tables
setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/State DSR/2015 Growth Tables")

for (GRADE.USE in GRADES){
  
  for (DOMAIN.USE in DOMAINS){
    
    for (CUT in proficiency.cuts){
      
      data.use <- student.data %>%
        filter(LYGradeKey == GRADE.USE) %>%
        filter(DOMAIN == DOMAIN.USE) %>%
        filter(LYProficiencyLevel == CUT)
      
      if(nrow(data.use) >= 10){
        
        data.use$quantile.cuts <- ntile(data.use$scorediff, 5)
      
        quantile.cuts <- c(-999, min(data.use$scorediff[data.use$quantile.cuts == 2]), 
                           min(data.use$scorediff[data.use$quantile.cuts == 3]), 
                           min(data.use$scorediff[data.use$quantile.cuts == 4]),
                           min(data.use$scorediff[data.use$quantile.cuts == 5]))
        
        quantiles <- data.frame(quantile.labels, quantile.cuts)
        
        quantiles <- quantiles %>%
          rename(Scale_Growth = quantile.cuts, 
                 Percentile_Key = quantile.labels) %>%
          mutate(Proficiency = CUT, 
                 Year = YEAR, 
                 Grade = GRADE.USE, 
                 DOMAIN = DOMAIN.USE) %>%
          left_join(proficiency.key, by = "Proficiency") %>%
          left_join(quantile.table, by = c("Percentile_Key" = "quantile.labels")) %>%
          mutate(Range_Key = paste(Grade, DOMAIN, Proficiency.Key, Year, sep = "_")) %>%
          rename(Proficiency_Key = Proficiency.Key,
                 Percentile = quantile.names) %>%
          select(Scale_Growth, Percentile, Grade, DOMAIN, Proficiency_Key, Proficiency, Year, Percentile_Key, Range_Key)
        
        percentile_80_count <- length(data.use$scorediff[data.use$scorediff >= quantiles$Scale_Growth[quantiles$Percentile == 80]])
        percentile_60_count <- length(data.use$scorediff[data.use$scorediff >= quantiles$Scale_Growth[quantiles$Percentile == 60] & data.use$scorediff < quantiles$Scale_Growth[quantiles$Percentile == 80]])
        percentile_40_count <- length(data.use$scorediff[data.use$scorediff >= quantiles$Scale_Growth[quantiles$Percentile == 40] & data.use$scorediff < quantiles$Scale_Growth[quantiles$Percentile == 60]])
        percentile_20_count <- length(data.use$scorediff[data.use$scorediff >= quantiles$Scale_Growth[quantiles$Percentile == 20] & data.use$scorediff < quantiles$Scale_Growth[quantiles$Percentile == 40]])
        percentile_0_count <- length(data.use$scorediff[data.use$scorediff < quantiles$Scale_Growth[quantiles$Percentile == 20]])
        
        #create variable to hold the counts
        quantiles <- mutate(quantiles, student_count = NA)
        quantiles$student_count[quantiles$Percentile == 0] <- percentile_0_count
        quantiles$student_count[quantiles$Percentile == 20] <- percentile_20_count
        quantiles$student_count[quantiles$Percentile == 40] <- percentile_40_count
        quantiles$student_count[quantiles$Percentile == 60] <- percentile_60_count
        quantiles$student_count[quantiles$Percentile == 80] <- percentile_80_count
        
        file.name <- paste(GRADE.USE, DOMAIN.USE, CUT, YEAR, sep = "_")
        
        saveRDS(quantiles, paste(file.name, ".rds", sep = ""))
        
      }
      
      else{
        
        quantile.cuts <- c(-999, NA, NA, NA, NA)
        
        quantiles <- data.frame(quantile.labels, quantile.cuts)  
        quantiles <- quantiles %>%
          rename(Scale_Growth = quantile.cuts, 
                 Percentile_Key = quantile.labels) %>%
          mutate(Proficiency = CUT, 
                 Year = YEAR, 
                 Grade = GRADE.USE, 
                 DOMAIN = DOMAIN.USE) %>%
          left_join(proficiency.key, by = "Proficiency") %>%
          left_join(quantile.table, by = c("Percentile_Key" = "quantile.labels")) %>%
          mutate(Range_Key = paste(Grade, DOMAIN, Proficiency.Key, Year, sep = "_")) %>%
          rename(Proficiency_Key = Proficiency.Key,
                 Percentile = quantile.names) %>%
          select(Scale_Growth, Percentile, Grade, DOMAIN, Proficiency_Key, Proficiency, Year, Percentile_Key, Range_Key) %>%
          mutate(student_count = NA)
        
        
        file.name <- paste(GRADE.USE, DOMAIN.USE, CUT, YEAR, sep = "_")
        
        saveRDS(quantiles, paste(file.name, ".rds", sep = ""))
        
      }
      
      
    }
    
  }
  
}

#read in all resulting text files from working directory, append them together, and sort them

raw.growth.tables <- as.list(list.files())

growth.table <- data.frame(data.table::rbindlist(lapply(raw.growth.tables, readRDS)))

growth.table <- growth.table %>%
  arrange(Grade, DOMAIN, Proficiency_Key, Scale_Growth, desc(Percentile)) 

#save file as .csv
setwd("//EDU-FileServer/HomeDirs/dduffy/My Documents/Data/State DSRs/State DSR/MN Home Brewed Growth Tables")

write.table(growth.table, "2015 Minnesota EL Growth Ntile.txt", sep = "\t", na = "", row.names = F)







